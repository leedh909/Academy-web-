2020.4.10 [수업 12일차]



* 다형성
//부모타입으로 자식 객체를 만들 수 있다. 


*업 캐스팅
//자식이 부모타입으로 바뀐다.
//ex) Car c = new Sonata();
//필드나 메소드는 부모의 객체것만 쓸 수 있다.

*다운 캐스팅
//부모가 자식타입으로 바뀐다.
//ex) ((Sonata)c).moveSonata();   ->강제형변환
//반드시 상속 관계에 있는 클래스끼리만 가능하다.


*instanceof 연산자
//어떤 클래스 형의 객체 주소를 참조하고있는지 확인하는것. 
//객체 타입 비교할 수 있다.


*매개변수와 다형성
//이름은 같고 매개변수만 다르게해서 사용가능(오버로딩) 해야하는걸 
//다형성을 통해서 부모객체 하나로 합치면 된다.
//public driveCar(Car c){}


*동적바인딩
//성립조건->상속관계&메소드 오버라이딩이 되어있어야된다.
//Car - SportsCar - SUV
//ex) 
SportsCar c1 = new SportsCar();
c1.break();----->SportsCar의 break()메소드가 실행된다.
Car c2 = new SUV();
c2.break();
----->보이는건 Car의 break()메소드로 보이지만 실행되는건 SUV의 break()메소드가 실행된다.


*추상 클래스(abstract)
//추상 메소드를 가지고 있는 클래스를 추상 클래스라고 한다.
//[접근제한자] abstract 반환형 메소드명(자료형 변수명);
//객체 생성 불가능.--미완성 클래스이기 때문에 안된다.
//대신 참조형 변수 타입으로는 사용가능.

//추상 클래스를 상속 받을시, 추상메소드를 반드시 구현해줘야한다.


*인터페이스 -->추상화보다 강제성이 강하다.
//무조건 상수필드와 추상 메소드 만으로 구성.
//[접근 제한자] interface 인터페이스명{  상수필드&추상메소드  } 
//객체 생성 불가능. 대신 참조형 변수는 가능.(추상클래스와 비슷)
//공동 작업을 위한 인터페이스 제공
//상속시->  클래스명 implements 인터페이스명 


//-------------------------------------------
// 처리 방식을 이해하기 전에는 쓰지마라.......
**********  @Override 단축키  	(Shift + Alt + S, V)



// 오버라이딩 재정의해줄때 @Override 라고 어노테이션이 있느냐 없느냐 차이는 없다.





진행 : 다형성


------------------------------------------------------------------------------------



진행 : 다형성 연습, 연습풀이, 실습문제





* 인터페이스를 상속 받았는데 구현하기 싫어서
//다시 추상메소드로 바꾸고 클래스도 추상클래스로 만들면 된다.
//ex) public abstract class AreaImpl implements Area{ ... }


*double 을 String으로 바꿀때는 String.format("%f",res)로 바꾸면 된다.
//ex) setRes(String.format("%f", res));










