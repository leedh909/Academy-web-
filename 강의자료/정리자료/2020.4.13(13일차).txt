2020.4.13 [수업 13일차]



*API
*String(문자열 전달 타입)
//불변이라 수정시 새로 할당되어 새 주소를 넘김.

*StringTokenizer클래스 
-> 생성시 전달받은 문자열을 구분자로 나누어 각 토큰에 저장
//ex) StringTokenizer st = new StringTokenizer(str, "|");

Q) 문자열끼리 더하도 새로 할당하는가?
//그렇다. 새로 할당 받아서 변수에 넣어준다.


*Wrapper 클래스
//Primitive Data Type을 객체화 해주는 클래스
//String을 기본자료형으로 바꾸기( 자료형.parse자료형("String"); )
//기본자료형을 String으로 바꾸기( 자료형.valueOf(값).toString(); )


*날짜 관련 클래스(Date)
//입력받은 데이터의 시간을 알고자할때 자주 쓰인다
//Date today = new Date();
->현재 날짜, 시간 정보를 가져와 기본 값으로 사용.
//Date when = new Date(12345687L);


*Calendar 클래스
//생성자가 protected 이기 때문에 new연산자를 통해 객체 생성 불가능
//getInstance() 메소드를 통해서 객체 생성


*SimpleDateFormat
//어떠한 형식으로 날짜와 시간 정보를 제공하겠다.
//ex) SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd");


*문자열을 리터럴로 생성  ---> Java14_BasicAPI.com.test.chap01_string.run
*생성자를 통한 문자열 생성 ---> Java14_BasicAPI.com.test.chap01_string.run
*String pool 이란?
//pool이라는 곳에서 입력해준 값이 있는지 없는지 판단후 주소를 할당한다.
//그래서 같은 해쉬코드값이 존재할 수 있다.
//JVM이 String pool에 저장시킨다.


*concat() : 합치기
//ex)System.out.println(str.concat("def"));

*contains() : 포함여부
//ex)System.out.println(str.contains("ac"));

*split() : 나누다
//String str1 = "a,b,c";
//String[] strArr = str1.split(","); //나눈 값은 배열값으로 반환받는다.
//StringTokenizer와 다른점은 split은 나눈값을 배열에 저장받는 식이다.

*for-each문  ==향상된 for문
//ex)	for(String arr: strArr) {
		System.out.println(arr);
	}

*substring() : 잘라내기
//ex) System.out.println(str1.substring(2,5));

*trim() : 앞,뒤 공백제거
//ex) System.out.println(str2.trim());

*replaceAll(바꿀값, 바뀐값) : 바꿀값을 원하는 걸로 바꾼다. 
//ex) System.out.println(str2.replaceAll(" ", ""));





진행 : 연습문제(다형성)풀이, 기본API 설명


------------------------------------------------------------------------------------



진행 : StringBuffer, StringBuilder, 메소드 체이닝, StringTokenizer, Wrapper, ==> 기본 API 실습




*StringBuffer , StringBuilder의 특징
- mutable클래스(가변=변할수 있는), 변경과 저장을 위한 메모리공간(버퍼)을 내부에 지닌다.
- 버퍼의 초기값 16개의 문자를 저장 가능하다. 자동으로 증가
//StringBuilder sb1 = new StringBuilder(21); ---> 용량을 지정할수도 있다.
//가변하면 할당되는 주소의 값이 변하지 않는다.
//불변하면 할당되는 주소의 값이 달라진다.(String은 불변)

*메소드 체이닝
=> 메소드끼리 . 으로 연결되어있는 걸 의미
//ex) sb.append("배가 불러요").append("~~!!");


*insert 범위안에 데이터를 삽입 = 인덱스번호로 지정한 곳에 데이터 삽입
sb.insert(2, "점심을 먹어서");
System.out.println(sb);
		
		
*delete : 범위안에 삭제(시작, 끝)==>시작부터 끝부분 앞(끝-1부분)까지 삭제
sb.delete(2, 9);
System.out.println(sb);
		
*reverse : 뒤집기 (전체 순서가 바뀐다.)
sb.reverse();
System.out.println(sb);


*StringTokenizer
//토큰단위로 데이터가 나뉘어 진다.
//hasMoreTokens() : 토큰이 뒤에 있냐 체크. 
//nextToken() : 커서를 다음으로 옮긴다.


*Wrapper 클래스 
-> 기본자료형을 객체로 만들어주는 클래스.
//Boxing :  기본자료형 --> Wrapper클래스 객체         ,AutoBoxing(자동처리)
//UnBoxing : Wrapper클래스 객체 --> 기본자료형		,AutoUnBoxin(자동처리)

------------------------------------------------------------------------------------
*Date 클래스
//ex) String originTime = new Date(0L).toGMTString();
->지역 상관없이 그리니치 표준시로 나오게 하는 메소드. (하지만 보통 toGMTString은 안쓴다.)
//ex) Date today = new Date();
->오늘 날짜 출력(아무것도 입력하지 않으면 오늘날짜 출력)


*SimpleDateFormat 클래스
//ex) SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
->원하는 형식으로 바꾸어서 출력가능.(출력문->System.out.println(sdf.format(today));)



*Calendar(오래되서 오류가 많다)
//ex) Calendar calendar = Calendar.getInstance();
->객체 생성이 불가능 하기 때문에 getInstance()로 생성해준다.

// calendar에서 set할 때, 월(month)만 빼기 1을 해줘야 한다.
->ex) calendar.set(2020,4-1,13);    -> 오래된 코딩이라 오류가 많다.

//calendar.get(calendar.MONTH)+1을 가져와야한다. 
->ex) int month = calendar.get(calendar.MONTH)+1; 

//ex) cal.add(calendar.YEAR, -10)
-> add()메소드는 지정된 값에 값을 추가하거나 빼는 메소드이다.


*타임존(Timezone)
//TimeZone.getAvailableIDs() 을 뽑아내면 각 나라별 명칭이 나온다.


*GregorianCalendar도 Calendar랑 비슷하다.(set할때, 1을 빼줘야함.)









