2020.4.17 [수업 16일차]


진행 : 연습문제(예외처리)

------------------------------------------------------------------------------------

진행 : 입출력(IO)



*입출력: 데이터를 입력받고 출력하는 것.

*데이터를 주고 받을 때 반드시 필요한것은 스트림이다.
*스트림(흐름) = 데이터통로 라고 봐도 된다.
//입력스트림, 출력스트림
->모든 스트림은 단방향이다. 하나의 스트림으로 입출력을 동시에 수행할 수 없다.
(크기는 문자기반이 더 크다.)
*바이트기반 스트림 
->InputStream , OutputStream
*문자기반 스트림 
->Reader, Writer


*InputStream : 바이트기반 입력 스트림 
//close()===자원을 반납한다. 통로를 닫는다.

*OutputStream : 바이트기반 출력 스트림
//flush()===버퍼에 잔류하는 모든 바이트 출력.
//close()===자원을 반납한다. 통로를 닫는다.


*Reader : 문자기반 입력 스트림
//close()===자원을 반납한다. 통로를 닫는다.

*Writer : 문자기반 출력 스트림
//flush()===버퍼에 잔류하는 모든 바이트 출력.
//close()===자원을 반납한다. 통로를 닫는다.


*File 클래스
//파일 크기, 속성, 이름 등의 정보와 파일 생성 및 삭제 기능 제공.
ex) File file = new File("외부자원");


*기반스트림( File이라고 붙으면 기반스트림이다. ) === 통로 라고 생각해라.
*보조스트림( 기반스트림 생성후 보조스트림을 생성해야한다. ) === 통로를 꾸미는것이라고 생각해라.


ex) FileInputStream           ->객체명을 보고 흐름을 구성하라.
// 파일기반 바이트단위 입력스트림 이라고 생각해라.


*객체생성
객체명 파일명 = new 객체명(외부자원);
ex) FileInputStream fils = new FileInputStream("C:/data/test.txt");
(단, 출력할때는 조심해야한다.)
FileOutputStream fos = new FileOutputStream("외부자원"); ---덮어쓰기된다.
FileOutputStream fos = new FileOutputStream("외부자원",true); ---이어쓰기된다. 


*보조스트림 종류
//문자변환, 입출력 성능, 기본 데이터타입 출력, 객체 입출력
//ex) InputStreamReader 바이트스트림과 문자스트림을 같이 쓰기위해서 사용한다.(=문자변환 보조스트림)
//ex) BufferedInputStream 버퍼에 데이터를 모아 한꺼번에 작업을 실행시킨다.(=성능향상 보조스트림)
//ex) DataInputStream 기본자료형 별 데이터 읽고 쓰기 가능하다.(=기본 타입 입출력 보조 스트림)
       타입보조스트림은->(단,입력된 자료형의 순서와 출력될 자료형의 순서가 일치해야한다.)
//ex) ObjectInputStream 객체를 파일 또는 네트워크로 입출력할 수 있다.(=객체 입출력 보조스트림)
       객체입출력보조스트림은->(단, 객체는 문자가 아니므로 바이트 기반 스트림으로 변경해주어야한다.)

//기반스트림으로 통로를 먼저열고 보조스트림으로 기능을 향상시킨다.
(기반스트림 생성->보조스트림 생성->보조스트림으로부터 데이터 읽어옴)


*직렬화(Serialization)
//Seializable 인터페이스를 implements 하여 구현
//객체데이터가 저장된 heap메모리영역에 있는 데이터를 바이트 단위로 쪼개는것이다. 


*역직렬화(Deserialization)
//직렬화된 것을 원래대로 되돌린다.








//시험봤던 것들중에 내용정리

1. 캡슐화 : 자료형이 다른 데이터들을 배열처럼 연속 나열할당하면서 하나로 묶어 관리하면서, 클래스 외부에서의 접근을 제한함으로 데이터의 보호를 목적으로 하는 기술

2. 상속 : 다른 클래스가 가지고 있는 멤버들을 새로 만들 클래스에서 직접 만들지 않고 상속을 받음으로써 새 클래스가 자신의 멤버처럼 사용할 수 있게 만든 클래스의 재사용성을 높이면서 코드의 중복을 줄이는 기술

3. 다형성 : 하나의 타입으로 상속 관계에 있는 여러 객체를 다룰 수 있어 클래스를 종류별로 처리해야 하는 메소드 오버로딩을 줄일 수 있는 기술




	
1. public char charAt(int index) : 전달받은 index 위치의 문자를 리턴

2. public String concat(String str) : 전달받은 str 문자열과 this 문자열을 하나로 합쳐서 리턴

3. public int length() : this 문자열의 글자갯수 리턴

4. public String substring(int beginIndex, int endIndex) : 문자열의 beginIndex 위치에서부터 endIndex - 1 위치까지의 문자열을 리턴

5. public char[] toCharArray() : 문자열을 문자배열로 바꾸어 리턴

6. public static String valueOf(char[] data) : 문자배열을 문자열로 바꾸어 리턴





