2020.4.2 [수업 6일차]




*배열: 같은 자료형의 변수를 하나의 묶음으로 다루는 것.
//배열선언 ==>stack 영역에 참조형 변수를 만드는것.
// 자료형[] 배열명;
// 자료형 배열명[];

//자료형[] 배열명 = new 자료형[배열크기];  ==> heap영역에 배열크기의 공간을 생성.
//자효형 배열명[] = new 자료형[배열크기];

배열선언시 stack영역에 참조형 변수(int[] arr)가 생김 -> 배열공간(new int[4])은 heap영역에 생김.
//선언과 동시에 초기화도 가능하다.
//선언된 자료형과 같은 데이터만 입력가능하다.


*배열 사용 이유???
//변수선언이나 선언한 변수의 합을 하려면 일일이 입력해주어야한다.
//이를 편하게 하기 위해서 


****return의 의미는 코드가 실행되다가 선언시 메소드가 종료된다라는 걸 의미한다.


*선언은 stack에 배열의 주소를 보관할 수 있는 공간을 만드는것.
//ex) int[] arr;
*할당은 new 연산자를 이용하여 heap영역에 공간을 만드는것.
//ex) arr = new int[5];
*선언과 할당
//ex) int[] arr = new int[5];


*hashcode = 주소값이라고 생각해라.
//hashcode = 주소값, 저장되어있는 메모리의 주소값이라고 생각해라 원래는 주소값을 찾아가기위한 키(Key)이다.
//객체를 인식할 수 있는 정수
//해쉬함수를 이용해서 해쉬코드 사용 그리고 해쉬테이블에 해쉬코드가 쌓여있다. 메모리영역을 찾아가기 위해서 사용한다.
//해쉬코드 : 실제주소값은 아니지만 주소값이라 생각해도 상관없다.
//실제 주소를 찾기 위한 key 역할


*****String.length() --- 배열.length
//()가 있으면 메소드 --- 가로가 붙지않으면 변수이다.(=필드에 저장되어있는 변수)


*배열 길이를 변경시
//darr = new double[30];
//새롭게 방을 추가해서 새로운 주소값을 받아오는 것이다.
//원래 배열의 사이즈는 바꾸지 못한다.!!!! 중요!!!! 


*배열 삭제시
//darr = null;
//할당받는 주소를 없앤다. 하지만 배열공간은 사라지지 않는다.
//하지만 시간이 지나면 자바가 알아서 가비지컬렉터에서 지워준다.
//위처럼 호출시 NullPointerException이 뜬다. null을 호출시 많이 발생.


*배열 선언 후 초기값을 지정 안하면
//아무것도 안넣으면 JVM이 기본적으로 지정한 초기값으로 설정된다.

//int[] iarr2 = {11,22,33,44,55,66,77,88};
//방이 생성되면서 초기값도 지정해준다.


*main(String[] args){ ... }
//문자열 배열로 받겠다는 의미이다.





진행 : 배열(선언,할당,초기화), hashcode란?, return의 의미.


------------------------------------------------------------------------------------


진행 : 배열연습, 배열(복사), 연습문제, 랜덤사용 종류, 



*upper (대문자로 바꾸는 방법)
//Character.toUpperCase(ch[i]);
//java.lang 은 import 하지 않아도 jvm이 자동으로 포함시켜 처리하는 패키지.
//Char->Character 클래스 이용
//int -> Integer 클래스 이용
//String -> String 클래스 이용


*배열의 복사
//얕은 복사 => 주소값만 복사하는 것.
//깊은 복사 => 배열 안에 있는 데이터를 따로 복사하는 것.

*얕은복사
//같은 배열을 가리고 있기 때문에 원본or카피본을 변경시 다른쪽도 변경된다.!!!
//원본과 카피본은 hashcode 값이 같다.(= 참조하는 주소값이 같다)

*깊은복사
//방법1
//원본과 카피본이 할당받는 공간이 다르기 때문에 원본을 변경해도 카피본이 변경되지 않는다.
//원본과 카피본의 hashcode 값이 다르다.(= 참조하는 주소값이 다르다)

//방법2
//arraycopy()를 이용한 복사
//java.lang.System 안에 있는 메소드이다.
//System.arraycopy(src, srcPos, dest, destPos, length);
	//src : 원본배열, srcPos : 복사 시작위치
	//dest : 카피배열, destPos : 붙여넣기 시작위치
	//length : 복사될 길이
//System.arraycopy(originArr, 0, copyArr, 0, originArr.length);

//방법3
//clone()을 이용한 복사
//복제품을 만들어서 넣어주는 것이다. 
//기존에 가지고 있던 배열은 버려진다.
//기존에 있던 배열과 복사해온 배열의 hashcode 값이 달라진다.


*랜덤 사용하는 방법
//Java.util 패키지의 Random을 사용하는 방법.
//Java.lang 패키지의 Math.Random을 사용하는 방법.


