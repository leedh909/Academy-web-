2020.4.6 [수업 8일차]



*객체지향프로그램? Why-> 처리하기 어려운걸 처리하려고.
//절차지향 보다 복잡하고 어려운 문제를 해결 가능.


*객체 == new 연산자를 통해 메모리 영역에 생성된것.
//메모리를 할당하고 가져와 쓰겠다.


*클래스 == 필드, 기능을 구현.


*구조체 == (여러개의 자료형, 여러개의 데이터) == java에서는 클래스


*추상화
-> 공통적인 부분을 뽑아내서 변수로 정리하고 클래스에서 사용하겠다.
//클래스를 객체(=인스턴스)로 만드는 과정을 인스턴스화(=new연산자를 쓰는것)라고 부른다.
//ex) 설계도(클래스)를 바탕으로 철수,영희(객체)를 만들고 메모리를 할당한다.


*객체 지향 4대 특성.
//캡슐화, 상속, 다형성, 추상화


*캡슐화==데이터들과 기능을 하나로 묶어 관리하는 기법. 
//접근제한을 원칙으로 한다.(외부에서 데이터의 직접 접근을 막는다.=> private로 선언)
//데이터를 가지고 싶으면 같은 클래스 안에다가 선언해야한다.
//정보의 은닉이라고도 한다.
//private로 선언하면 다른 클래스에서 사용할 수 없다.(오직 같은 클래스 내에서만 사용가능)
//필드에 private로 숨겨진 변수는 메소드를 이용해서 이용해야 한다.(why? 값의 변화를 통제하기 위해)
->데이터를 처리하는 함수들을 클래스 내부에 작성해서 사용.


*생성자 == 객체를 생성하기 위한 메소드
//ex) public Account() {	}






진행 : 객체, 캡슐화, 추상화


------------------------------------------------------------------------------------


진행 : 클래스,패키지, import, 생성자, static, 오버로딩 , this



*생성자 
//접근제한자에 클래스명(){ }
//객체 생성을 할때 필요한것.
//ex) public Member(){}


*클래스 생성시.
//필드, 생성자, getter, setter 만들어주는것이 기본이다.


*import는 반드시 패키지와 클래스 사이에 있어야한다.
//lang패키지는 import하지 않아도 사용가능하다.


*static
//프로그램이 시작하면 static(정적)영역에 생성된다.(=자동으로 할당된다.)
//공유할 목적의 필드에 사용한다.


*초기화블럭
static 블럭 : 프로그램 시작시 한번만 초기화
인스턴스 블럭 : 생성자를 통한 초기값. -> 다른값들에 덮어씌어진다


//get메소드는 값을 가져온다.
//set메소드는 값을 넣어준다.


*생성자!!
//객체가 new연산자를 통해 heap메모리 영역에 할당될때
//객체 안에서 만들어지는 필드 초기화
//생성자명을 클래스명과 똑같이 지정해주어야함. 
//매개변수 있는 생성자가 있다면 기본 생성자를 꼭 써줘야한다.
//ex) public Academy(){  }    ==> 기본생성자
//ex) public Academy(int studentNo, String name){...}   ==> 매개변수 있는 생성자
//매개변수 생성자는 전달 받은 값으로 초기화해준다.


*오버로딩 
//한 클래스 내에서 이름이 같은 메소드를 여러개 작성하는 기법.
//같은 메소드 이름, 다른 매개변수의 개수, 다른 매개변수 타입.
ex) System.out.println(....) 안의 값이 다 다르다.


*파일(KindsOfVariable.java)에 자세한 내용있음.
//매개변수는 호출시 값이 넘어와서 변경되기 때문에 초기화가 필요없다.
//지역변수는 선언 외에 다시 사용하기 위해서는 반드시 초기화.

*파일(KindsOfVariable2.java)에 자세한 내용있음.
//상수필드 : static과 final 키워드를 함께 사용하는 것.-> 선언과 동시에 초기화시켜줘야한다.
//static은 프로그램 시작시 static영역에 올라가야하는데 nonstatic메소드는 호출될때 사용하기때문에 오류가 뜬다.
// ex)   public void methodTest() { static int localStaticNum;}


*this
//현재 객체의 필드를 의미.
//this. 메소드 내에 숨겨진 채 존재하는 래퍼런스 변수, 할당된 객체 자신을 의미.
생성자 초기화할때 위에 같은걸 선언했으면, 아래처럼 불러올 수 있다.
(==중복되는 동일한 초기화하는 내용의 생성자가 존재하는 경우 this(매개변수)를 사용할 수 있다.
(단, 추가사항은 마지막에 포함해아한다.)
//ex) this(userId,userPwd,userName);
//ex) this.EnrollDate = EnrollDate;






