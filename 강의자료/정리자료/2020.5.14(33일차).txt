2020.5.14 [수업 33일차]



*테이블 형태를 보는법
//CMD에서 DESC 테이블명; 입력하면 볼 수 있다.

*CRUD : 데이터 처리 로직
--CREATE : 데이터 추가 / INSERT 
--READ 	 : 데이터 조회 / SELECT
--UPDATE : 데이터 수정 / UPDATE
--DELETE : 데이터 삭제 / DELETE

//게시판 만들때 C.R.U.D를 이용한 SQL이 중요하다.


*컬럼 명에 별칭 달기
--1. AS(alias) 표현
--2. AS 생략
-- 별칭에 ()나 띄어쓰기 같은 문자가 들어갈 경우
-- 반드시 " "로 구분 지어야 한다.
-- EX)SELECT EMP_ID "사번 임", EMP_NAME 사원명 FROM EMPLOYEE;


*컬럼 값이 만약 NULL이라면 어떤 연산을 처리하여도 결과는 NULL


***NVL() : 만약 현재 조회한 값이 NULL일 경우 별도로 설정한 값으로 변경
//ex) NVL(컬럼명, 기본값)


*컬럼에 일반값 사용
//ex) SELECT EMP_NAME ,SALARY *12, '원' 단위 FROM EMPLOYEE;


*DISTINCT : 중복 제거
--해당하는 값이 컬럼에 여러개 존재 할 경우
--중복을 제거하고 한 개만 조회(NULL 도 포함)


*연산자
--연결 연산자 '||'
--여러 컬럼의 결과나 값을 하나의 컬럼으로 묶을 때 사용
--EX) '사번'을 가진 사원의 이름은 'ㅇㅇㅇ'입니다.
// SELECT EMP_ID || '을 가진 사원의 이름은 ' || EMP_NAME || ' 입니다.' FROM EMPLOYEE;


*비교 연산자
-- <, >, <=, >= : 크기를 나타내는 부등호
-- = : 같다
-- != , ^=, <> : 같지않다.


*BETWEEN A AND B
// A와 B 사이 값을 구하는데 사용한다.


*LIKE : ~처럼 
--입력한 숫자, 문자가 포함된 정보를 조회
--EMPLOYEE에서 사원의 이름 가운데 '중'이 들어가는 사원 정보 조회
--'_' : 임의의 한 문자를 의미.
--'%' : 몇자리 문자든 관계없이. 
//ex) SELECT * FROM EMPLOYEE WHERE EMP_NO LIKE '______-1%';




진행 : DML 연습&실습



------------------------------------------------------------------------------------



진행 : SQL 연산자 , SQL 함수



*LIKE 안에서 '_' 사용시 문자로 인식하는 방법
//사원 중 이메일 4번째 자리가 '_'인 사원의 정보 조회
//ex) SELECT * FROM EMPLOYEE WHERE EMAIL LIKE '___#_%@%' ESCAPE '#';


*IN 연산자
--IN(값1,값2,값3,...)
--안에 있는 값들 중 하나라도 일치하는 경우 해당하는 값을 조회
//ex) SELECT * FROM EMPLOYEE WHERE DEPT_CODE IN('D1','D6');


*연산자의 우선 순위
-- 0. ()
-- 1. 산술 연산자(+,-,*,/)
-- 2. 연결 연산자
-- 3. 비교 연산자
-- 4. IS NULL / IS NOT NULL / LIKE, IN / NOT IN
-- 5. BETWEEN A AND B
-- 6. NOT
-- 7. AND
-- 8. OR
 (AND 랑 OR 우선 순위를 조심해야한다.!!!!!!!!!!!!!)


*****함수(FUNCTION) -> (단일 행 함수, 그룹 함수)
//단일 행 함수 = 여러 개의 입력값 전달시 여러개의 결과값이 나온다.
//그룹 함수 = 여러 개의 입력값 전달시 한개의 결과값이 나온다.


*문자 관련 함수
--LENGTH
--문자열의 길이를 계산하는 함수
//EX) SELECT LENGTH('Hello') FROM DUAL;    --DUAL 이라는 가상의 테이블

*** DUAL : 임시테이블(가상의 테이블)
--SELECT 문에서 리터럴을 활용한 계산식을 테스트 하고자 할때 사용하는 임시 테이블


*****INSTR : 주어진 값에서 원하는 문자가 몇번째인지 찾아 반환하는 변수
//원하는 값이 없을때는 0을 반환한다.


*SUBSTR(컬럼명|값,시작순번[,가져올 개수])    [가져올 개수]안에는 생략도 가능
--주어진 문자열에서 특정부분만 꺼내오는 함수


*EMPLOYEE 테이블에서 사원의 이름, 이메일 조회, 이메일은 아이디부분만 조회하기
// EX) SELECT EMP_NAME , SUBSTR(EMAIL,1,INSTR(EMAIL,'@')-1) FROM EMPLOYEE;


*LPAD / RPAD 
--공간(=빈칸)이 남는 곳을 채워준다.
//예시로 주민등록번호를 가져올때 뒷자리는 *로 채우는것이다.


*LTRIM / RTRIM
--현재 부여된 컬럼 값이나, 특정 값으로 부터 특정 문자를 찾아 지워주는 함수
//지우는 값을 입력 안하면 기본으로 공백을 받는다.
//시작하는 부분부터 확인하는데 특정 값이 없으면 그냥 끝낸다.
//EX) SELECT LTRIM('      HELLO') FROM DAUL;
//EX) SELECT LTRIM('012345','0'), LTRIM('111234','1'), LTRIM('012345','1') FROM DUAL;


*TRIM
--주어진 문자열에서 양끝을 기준으로 특정 문자를 지워주는 함수
--기본형태
//EX) SELECT TRIM('    내일 비옴          ') FROM DUAL;
--양쪽의 특정값을 지우고자 할때
//EX) SELECT TRIM('0' FROM '00001230000') FROM DUAL;
--LTRIM과 비슷--SELECT TRIM(LEADING '0' FROM '00012300')FROM DUAL;
--RTRIM과 비슷--SELECT TRIM(TRAILING '0' FROM '00012300')FROM DUAL;
-- TRIM과 비슷--SELECT TRIM(BOTH '0' FROM '00012300')FROM DUAL;


*LOWER / UPPER / INITCAP
--주어진 문자열을 소문자, 대문자, 앞글자들만 대문자 형식으로 변경해주는 함수
//EX) SELECT INITCAP('nice to meet you') FROM DUAL;
//결과는 Nice To Meet You 이렇게 뜬다.


*CONCAT : 여러 문자열을 하나의 문자열로 합치는 함수
//EX) SELECT CONCAT('오라클 ','너무 재밌어요^^;;;') FROM DUAL;
//EX) SELECT '오라클 '||'재미져요:)' FROM DUAL;     --둘의 결과값은 같다.


****REPLACE : 주어진 값에서 특정 문자를 변경할 때 사용하는 함수 ( 값을 대체한다고 보면 된다)
//EX) SELECT REPLACE('HELLO WORLD','HELLO','BYE') FROM DUAL;


*SUBSTR을 활용하면 날짜 데이터도 나눌수 있다.
-- 날짜라서 1990년이 아니라 90년으로 가져오는 것이다.
-- 날짜 형태는 '19/03/15'로 나온다 --> 19 / 03 / 15
//EX) SELECT EMP_NAME 이름, CONCAT(SUBSTR(HIRE_DATE,1,2),'년') "입사년도" , HIRE_DATE FROM EMPLOYEE


*그룹 함수(Group Function)
--SUM(), AVG(), MAX(), MIN(), COUNT()


*EMPLOYEE 테이블에서 '해외영업1부'에 근무하는 모든 사원의 평균 급여, 가장 높은 급여, 가장 낮은 급여, 급여합계 조회
SELECT EMP_NAME, AVG(SALARY) "평균급여", MAX(SALARY) "가장높은급여", MIN(SALARY) "가장낮은급여", SUM(SALARY)  "급여합계" FROM EMPLOYEE WHERE DEPT_CODE ='D5';
*******위의 코드에서 EMP_NAME은 값이 여러개 들어가는데 다른 그룹함수들은 값이 하나 들어가기 때문에 오류가 나는 것이다.
SELECT AVG(SALARY) "평균급여", MAX(SALARY) "가장높은급여", MIN(SALARY) "가장낮은급여", SUM(SALARY)  "급여합계" FROM EMPLOYEE WHERE DEPT_CODE ='D5';


*COUNT() : 해당 하는 행의 개수
--NULL값이 존재할 경우 이를 계산하지 않는다.





