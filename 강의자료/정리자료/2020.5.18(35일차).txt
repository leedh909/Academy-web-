2020.5.18 [수업 35일차]



*온라인 강의로 변경될 수 있다.(21일부터 29일까지)

-- GROUP BY : 주어진 결과를 특정 소그룹으로 편성할 때 사용하는 문법
-- HAVING : 그룹 내의 조건을 설정할 때 사용한다.

/*
	-쿼리 실행 순서-
5	SELECT 컬럼명
1	FROM 테이블명
2	WHERE 조건식
3	GROUP BY 컬럼명
4	HAVING 그룹내의 조건식
6	ORDER BY 표현식

*/

*DECODE()
--DECODE(컬럼명, 결과1, 값1[, 결과2, 값2 ....], 기본값)


*****SET OPERATOR (비교하는 테이블의 컬럼이 같아야한다.)
--두개 이상의 SELECT 한 결과를 합치거나, 중복을 별도로 제거하거나 하는 
--집합 형태의 결과로 조회하는 명령어
--SELECT 결과인 A와 B를 하나로 합치는 경우
--A와 B의 컬럼 개수와 자료형은 같아야 한다.!! 반드시!!

**합집합
--UNION :
--두 개 이상의 SELECT 한 결과를 구하는 명령어,
--중복이 있을 경우 중복되는 결과는 1번만 보여준다.

--UNION ALL :
--두 개 이상의 SELECT 한 결과를 보여주되,
--중복이 있을 경우 그대로 조회하여 보여준다.


**교집합
--INTERSECT : 두 개 이상의 결과 중 중복되는 결과만 보여준다.


**차집합
--MINUS : 두 개 이상의 결과 중 첫번째 결과만이 가진 내용을 보여주는 명령어
(중복된 결과는 사라진다)


****************JOIN
--두 개 이상의 테이블을 하나로 합쳐서 사용하는 명령
--가로로 데이터를(=컬럼을) 합친다(=컬럼 개수가 달라도 된다.)

--오라클 전용 문법 / ANSI 표준 문법
*오라클 전용 문법
--FROM 절에 ',' 기호를 붙여 합치게 될 테이블들을 나열
--WHERE 조건을 통해서 합칠 테이블들의 공통 사항을 작성
--컬럼명이 동일한 경우 별칭을 사용하여 구분해준다.

*ANSI 표준 문법
--조인 하고자 하는 테이블을 FROM 구문 다음에
--JOIN 테이블명 ON() | USING() 구문을 사용하여
--두 개 이상의 테이블을 하나로 합치는 방법
--두 개의 테이블에서 공통 컬럼의 이름이 다를 경우
// EX) JOIN DEPARTMENT ON(EMPLOYEE.DEPT_CODE=DEPARTMENT.DEPT_ID );
	-->(EMPLOYEE.)DEPT_CODE=(DEPARTMENT.)DEPT_ID --생략가능하다.
--두 개의 테이블에서 공통 컬럼의 이름이 같은 경우
// EX) JOIN JOB USING(JOB_CODE);


***** INNER JOIN / OUTER JOIN 
--두 개 이상의 테이블을 합칠때
--INNER JOIN은 둘 모두 일치하는 데이터만 합치고, 
--OUTER JOIN은 둘 중 하나, 혹은 둘 모두가 가진 모든 값을 합칠때 사용






진행 : 복습 , SET OPERATOR(합,교,차 집합), JOIN



------------------------------------------------------------------------------------



진행 : INNER JOIN / OUTER JOIN , CROSS JOIN, SELF JOIN, 다중 JOIN ,Sub Query




*INNER JOIN
--두개이상 테이블을 합칠때 모두 일치하는 데이터만 합친다.

*OUTER JOIN (3가지 정도가 있다.)
--LEFT [OUTER] JOIN : 두 테이블 중 원본(좌측) 테이블의 정보를 모두 포함하여 조회
--RIGHT [OUTER] JOIN : 두 테이블 중 JOIN에 명시한 테이블의 정보를 모두 포함하여 조회
--FULL [OUTER] JOIN : 두 테이블이 가진 데이터 중 서로가 가지지 않은 값이라도 모두 포함하여 조회

--LEFT JOIN
EX)--ANSI 표준
SELECT DEPT_CODE , EMP_NAME , DEPT_TITLE
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID);

EX)--ORACLE
SELECT DEPT_CODE , EMP_NAME , DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE = DEPT_ID(+);	--'+'를 오른쪽에 써줌으로써 LEFT JOIN을 하겠다는 의미이다.


--RIGHT JOIN
EX)--ANSI 표준
SELECT DEPT_CODE, DEPT_ID, EMP_NAME
FROM EMPLOYEE
RIGHT JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID);

EX)--ORACLE
SELECT DEPT_CODE, DEPT_ID, EMP_NAME
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE(+) = DEPT_ID;	--'+'를 왼쪽에 써줌으로써 RIGHT JOIN을 하겠다는 의미이다.


--FULL JOIN
EX)--ANSI 표준
SELECT DEPT_CODE , DEPT_ID, EMP_NAME 
FROM EMPLOYEE
FULL JOIN DEPARTMENT ON(DEPT_ID = DEPT_CODE);

EX)--ORACLE
--ORACLE 구문에서는 FULL JOIN을 지원하지 않는다.


*CROSS JOIN(칼럼이 너무 많이 생겨서 웬만하면 사용하지 않는다.)
--카테시안 곱
SELECT EMP_NAME, NATIONAL_CODE
FROM EMPLOYEE 
CROSS JOIN NATIONAL;


*SELF JOIN
--자기 자신을 조인하는 방법
--한테이블의 정보 중 값 비교가 필요한 정보들을 계산하여 조회하는 방식

--직원의 정보와 직원을 관리하는 매니저의 정보를 조회


*********다중 JOIN 
--여러 개의 테이블을 JOIN 하는것
--일반 조인과 선언방식은 같으나, 앞서 조인한 결과를 기준으로 
--이후에 조인할 테이블을 연결 짓는다.
--따라서 조인 순서에 반드시 주의해야 한다.



*******Sub Query 
--주가 되는 메인 쿼리 안에서 조건이나 하나의 검색을 위한 다른 쿼리를 추가하는 기법

* 단일행 서브쿼리
--결과값이 1개 나오는 서브쿼리

* 다중 행 서브쿼리
--결과 값이 여러 줄 나오는 서브쿼리

* 다중 열 다중 행 서브쿼리
--여러 컬럼과 여러 줄을 가진 서브쿼리를 사용하여 결과를 조회

**서브 쿼리의 사용 위치
--SELECT , FROM , WHERE , GROUP BY , HAVING , ORDER BY , JOIN 
--DML : INSERT, UPDATE, DELETE
--DDL : CREATE TABLE, CREATE VIEW
--어느 위치든 사용 할 수 있다.				




수요일 시험 (~~JOIN 까지)

