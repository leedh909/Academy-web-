2020.5.21 [수업 38일차]


*계정을 새로 만들것이다.
//시스템 계정에 들어가서 
--TEST 계정 생성
CREATE USER TEST IDENTIFIED BY TEST;
--권한 부여
GRANT CONNECT , RESOURCE TO TEST;
//CMD 창에서 SQLPLUS 에서 계정을 확인해본다.

*디비버에서 권한 준 계정으로 데이터베이스 생성
//생성할 때, FIND CLASS -> OCRACLE.JDBC.DRIVE.ORACLEDRIVER 설정해준다.


진행 : DDL 환경설정

------------------------------------------------------------------------------------

진행 : DDL , 제약조건 설정 및 연습,


*CREATE : 데이터 베이스의 객체를 생성하는 DDL
 	[사용형식]
 	CREATE 객체형태 객체명 (관련 내용)
 	
 	-- 테이블 생성 시
 	CREATE TABLE 테이블명(
 		컬럼명 자료형(길이) 제약조건
 	);
 	
 	제약조건: 테이블에 데이터를 저장하고자 할때 지켜야 하는 규칙
 		NOT NULL - NULL값 허용하지 않겠다.( 필수 입력 사항)
 		UNIQUE - 중복 값을 허용하지 않는다.(중복되는 값 입력시 에러)
 		CHECK - 지정한 입력 사항 외에는 받지 못하게 막는 조건
 		PRIMARY KEY - (NOT NULL + UNIQUE)
 			테이블 내에서 해당 행을 인식할 수 있는 고유의 값
 			테이블 내에서 단 1개만 존재 가능
 		FOREIGN KEY - 다른 테이블에서 지정된 값을 연결지어
 			참조로 가져오는 데이터에 지정하는 제약조건

*테이블 생성
--데이터를 저장하기 위한 객체
--2차원의 표 형태로 데이터를 담을 수 있다. 행과 컬럼으로 구성

--테이블의 각 컬럼에 주석 달기
--COMMENT ON COLUMN 테이블명.컬럼명 IS '주석내용';
//EX) COMMENT ON COLUMN MEMBER.MEMBER_ID IS '회원 아이디';

*CMD에서 계정으로 들어가서 테이블 정보 확인
// DESC MEMBER;

**데이터 사전으로 정보검색
SELECT * FROM USER_TAB_COLUMNS  WHERE TABLE_NAME ='MEMBER';
--테이블 주석 조회
SELECT * FROM USER_TAB_COMMENTS;
--컬럼 주석 조회
SELECT * FROM USER_COL_COMMENTS;

SELECT * FROM USER_TABLES;

** 제약조건(CONSTRAINTS) 
--테이블을 생성할때 각 컬럼에 값을 기록하는 것에 대한 제약사항을 설정하는 조건들 
--데이터 무결성 보장 : 고유한 값 혹은 값이 아무런 문제가 되지 않는다는 의미

--현재 사용자 계정에 관련된 제약 조건 확인
//EX) SELECT * FROM USER_CONS_COLUMNS;

*NOT NULL
--'널 값을 허용하지 않는다.'
--컬럼에 반드시 값을 기록해야 하는 경우
--데이터 삽입/수정/삭제 시에 NULL 값을 허용하지 않도록 
--컬럼 작성 시 함께 제약조건 작성(컬럼레벨 제약조건 등록)

*테이블 만들기
CREATE TABLE USER_NOCONS(
	USER_NO NUMBER,
	USER_ID VARCHAR2(20),
	USER_PWD VARCHAR2(30),
	USER_NAME VARCHAR2(15),
	GENDER VARCHAR2(3),
	PHONE VARCHAR2(14),
	EMAIL VARCHAR2(30)
);

*테이블에 값 추가
--DML : INSERT (입력시, 컬럼순서를 기억해서 입력해라)
INSERT INTO USER_NOCONS VALUES(1, 'USER01','PASS01','이창진','남','010-1234-5678','LEE123@KH.OR.KR');
//테이블 정보확인  EX) SELECT * FROM USER_NOCONS;

--컬럼레벨제약조건
CREATE TABLE USER_NOT_NULL(
	USER_NO NUMBER NOT NULL, --컬럼레벨제약조건
	USER_ID VARCHAR2(20) NOT NULL,
	USER_PWD VARCHAR2(30) NOT NULL,
	USER_NAME VARCHAR2(15) NOT NULL,
	GENDER VARCHAR2(3),
	PHONE VARCHAR2(14),
	EMAIL VARCHAR2(30)    
);


*UNIQUE 제약조건
--중복을 허용하지 않는 제약조건
--컬럼에 값을 입력/수정할때 중복을 확인하여
--중복 값이 있을경우 값 추가/수정을 못하게 막는 제약조건

*CONSTRAINT 살펴보기
SELECT * FROM USER_CONSTRAINTS C1, USER_CONS_COLUMNS C2
WHERE C1.CONSTRAINT_NAME = C2.CONSTRAINT_NAME
	AND C1.TABLE_NAME = 'USER_UNIQUE';
*CONSTRAINT_TYPE
--U : USIQUE
--P : PRIMARY KEY
--C : CHECK(=NOT NULL 포함)
--R : FOREIGN KEY (REFERENCE)


CREATE TABLE USER_UNIQUE2(
	USER_NO NUMBER,
--	USER_ID VARCHAR2(20) UNIQUE, --"컬럼레벨 제약 조건"
	USER_ID VARCHAR2(20),
	USER_PWD VARCHAR2(30),
	USER_NAME VARCHAR2(15),
	GENDER CHAR(3),
	PHONE VARCHAR2(14),
	EMAIL VARCHAR2(30),
	UNIQUE(USER_ID) --컬럼이 모두 작성된 후에 별도로 작성하는 제약조건을 
			"테이블 레벨 제약조건" 이라고 한다.
);

--UNIQUE 제약조건을 여러 개 컬럼에 적용 가능
--(단, 반드시 테이블 레벨에서 제약조건을 선언)
--테이블 레벨에서두개 이상의 컬럼 값을 중복되지 않게 설정 가능
//EX) UNIQUE(USER_NO,USER_ID)
//둘 다 동시에 비교된다. 하나라도 다르면 다르다고 뜸.

**제약조건 이름 설정 ( 다른 개발자가 제약조건 이름을 보고 구분하기 편하다 )
CREATE TABLE CONS_NAME(
	TEST_DATA1 NUMBER(10) CONSTRAINT NN_DATA1 NOT NULL,
	TEST_DATA2 VARCHAR2(20) CONSTRAINT UN_DATA2 UNIQUE,
	TEST_DATA3 VARCHAR2(30),
	CONSTRAINT UK_DATA3 UNIQUE(TEST_DATA3)
);
//SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'CONS_NAME';

*CHECK 제약조건
--컬럼에 값을 기록할때 지정한 값 이외에는
--값이 기록되지 않도록 범위를 제한하는 조건
--CHECK (컬럼명 비교연산자 값)
//EX) CHECK( GENDER IN('M','F'))

--CHECK 제약조건에 부등호 사용
//EX) CREATE TABLE TEST_CHECK2(
	TEST_DATA NUMBER(10),
	CONSTRAINT CK_TEST_DATA CHECK(TEST_DATA>0)
	);

--제약조건 여러개 설정하기
//EX) CREATE TABLE TEST_DUAL_CONS(
	TEST_NO NUMBER(10) NOT NULL UNIQUE,
	TEST_NO2 NUMBER NOT NULL
	);

*PRIMARY KEY 제약조건
--'기본키 제약조건'
--테이블 내의 데이터 중에서 행을 식별하기 위한 고유값을 가지는 컬럼에 NOT NULL과 UNIQUE 제약조건을 함께 걸어주는
--즉, 테이블 전체에 대한 각 데이터의 식별자 역할을 수행시키는 제약조건
--기본키로 선언된 컬럼은 값이 반드시 들어가고, 중복이 일어나면 안된다.
--기본키 제약조건은 각 테이블 마다 반드시 한개 존재해야한다.
--기본키 제약조건은 한 컬럼에 적용할 수도 있고, 여러 컬럼을 묶어 적용할 수도 있다.

--기본키 제약 조건을 설정하면 NOT NULL 과 UNIQUE가 함께 설정 된다.

--기본키 제약 조건을 여러 컬럼에 적용하기
//EX) CREATE TABLE USER_PK_TABLE2(
	USER_NO NUMBER(10),
	USER_ID VARCHAR2(20) UNIQUE,
	USER_PWD VARCHAR2(30) NOT NULL,
	USER_NAME VARCHAR2(15) NOT NULL,
	GENDER VARCHAR2(3) CHECK(GENDER IN('M','F')),
	CONSTRAINTS PK_USER_NO2 PRIMARY KEY(USER_NO,USER_ID)
	);

*DROP : 객체를 삭제하는 명령어
DROP TABLE MEMBER;





