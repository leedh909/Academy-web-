2020.5.22 [수업 39일차]


*FOREIGN KEY
--외래키, 외부키, 참조키 라고 한다.
--다른 테이블의 컬럼값을 참조(REFERENCE)하여 참조하는 테이블의 값만 허용
--FOREIGN KEY 제약조건을 통해 다른 테이블과의 관계(RELATIONSHIP)가 형성 된다.

--컬럼레벨일 경우
--컬럼명 자료형(길이) [CONSTRAINT 제약조건명] REFERENCES 참조할 테이블명[(참조할 컬럼명)] [삭제옵션]
--테이블 레벨 일 경우
-- [CONSTRAINT 제약조건명] FOREIGN KEY(적용할 컬럼명) REFERENCES 참조할 테이블명[(참조할 컬럼명)] [삭제옵션]
--대갈호[]는 생략 가능한 부분이다.
//EX) CONSTRAINT FK_GRADE_CODE FOREIGN KEY (GRADE_CODE) REFERENCES USER_GRADE(GRADE_CODE)

*삭제옵션
//EX) DELETE FROM USER_GRADE WHERE GRADE_CODE=4;

--참조하고 있는 원본 테이블의 컬럼 값이 삭제될때
--참조한 값을 어떻게 처리할 것인지 설정하는 옵션
--1. 부모 컬럼을 삭제할 때 자식을 NULL로 변경하기
-- ON DELETE SET NULL
//EX) CONSTRAINT FK_GRADE_CODE FOREIGN KEY (GRADE_CODE) 
	REFERENCES USER_GRADE(GRADE_CODE) ON DELETE SET NULL
--2. 부모 컬럼을 삭제할 때 관련된 자식도 함께 삭제하기
-- ON DELETE CASCADE
//EX) CONSTRAINT FK_GRADE_CODE FOREIGN KEY (GRADE_CODE) 
	REFERENCES USER_GRADE(GRADE_CODE) ON DELETE CASCADE


*COMMIT  :  지금까지 변경된 내용을 실제 데이터베이스에 반영하겠다.
*ROLLBACK    :   이전에 COMMIT 한 시점으로 데이터가 되돌아 간다.

*트랜젝션 : 하나의 작업단위 (SELECT - INSERT - UPDATE - INSERT 순으로 작업이 이루어지는 것)
--모두 성공 혹은 모두 실패

*SUBQUERY를 활용한 테이블 생성
-- 컬럼명, 데이터 타입, 값, NOT NULL은 복사된다.
-- 하지만 다른 제약조건은 복사되지 않는다.
//EX) CREATE TABLE EMPLOYEE_COPY AS SELECT * FROM EMPLOYEE;

--테이블의 형식만 복사하기
//EX) CREATE TABLE EMPLOYEE_COPY2 AS SELECT * FROM EMPLOYEE WHERE 1=2; 
   -->숫자 1과 2는 다르니깐 조건상 FALSE이므로 형식만 복사되는 것이다.

--각 컬럼에 값을 기록하지 않을 경우 기본값 설정하기
//EX) CREATE TABLE DEFAULT_TABLE(
	DATA_COL1 VARCHAR2(30) DEFAULT '없음',
	DATA_COL2 DATE DEFAULT SYSDATE
	);
//(데이터추가) INSERT INTO DEFAULT_TABLE VALUES(DEFAULT,DEFAULT);
--아무것도 입력하지 않고 기본값으로 데이터를 주기위해서는 DEFAULT로 선언해야한다.



진행 : 과제풀이, FOREIGN KEY, 삭제옵션(1,2), COMMIT, ROLLBACK, SUBQUERY를 활용한 테이블 생성

------------------------------------------------------------------------------------

진행 : ALTER , INSERT ALL, UPDATE,  


*ALTER
--제약조건을 테이블 생성 후에 추가하는 DDL

--[사용형식]
--ALTER TABLE 테이블명 ADD PRIMARY KEY(컬럼명)
--ALTER TABLE 테이블명 ADD FOREIGN KEY(컬럼명) REFERENCES 테이블명(컬럼명)
--ALTER TABLE 테이블명 ADD UNIQUE(컬럼명)
--ALTER TABLE 테이블명 ADD CHECK(조건식)
--ALTER TABLE 테이블명 ADD MODIFY 컬럼명 NOT NULL

--DML(데이터 조작 언어)
--INSERT, UPDATE, DELETE, SELECT(DQL)
--[ CRUD ]
--C(CREATE) : INSERT
--R(READ)	: SELECT
--U(UPDATE) : UPDATE
--D(DELETE) : DELETE

--INSERT : 새로운 행을 특정 테이블에 추가하는 명령어
--			실행 후에는 테이블의 행의 개수가 증가

--[사용형식]
--1. 특정 컬럼에 값을 추가하는 방법
--INSERT INTO 테이블명(컬럼명, ...) VALUES(값1, ...);
//EX) INSERT INTO EMPLOYEE(EMP_ID, EMP_NAME,EMP_NO,EMAIL,PHONE,DEPT_CODE ,JOB_CODE ,SAL_LEVEL ,SALARY ,BONUS ,MANAGER_ID ,HIRE_DATE ,ENT_DATE ,ENT_YN )
	VALUES(500,'추민석','700101-1234556','choo@kh.or.kr','01011112222','D1','J7','S4',3100000,0.1,'200',SYSDATE,NULL,DEFAULT);
--2. 모든 컬럼에 값을 추가하는 방법
--INSERT INTO 테이블명 VALUES(값, 값, ...);
//EX) INSERT INTO EMPLOYEE VALUES(900,'박응서','510101-1234567','park@kh.or.kr','01022334444','D1','J7','S3',4300000,0.2,'200',SYSDATE,NULL,DEFAULT);

*INSERT + SUBQUERY
--VALUES 대신 값을 지정하여 추가 가능
//EX) INSERT INTO EMP_01 (
	SELECT EMP_ID, EMP_NAME, DEPT_TITLE
	FROM EMPLOYEE 
	LEFT JOIN DEPARTMENT ON(DEPT_CODE=DEPT_ID)
	);

*INSERT ALL 
--EMPLOYEE 테이블에서
--입사일 기준 2000년 1월 1일 이전 입사자의 사번, 이름 입사일 급여를 EMP_OLD에 추가하고
--그 이후 입사자들의 사번, 이름, 입사일 급여를 EMP_NEW에 추가하여 처리하자
//EX) INSERT ALL 
	WHEN HIRE_DATE < '2000/01/01' THEN INTO EMP_OLD VALUES(EMP_ID, EMP_NAME, HIRE_DATE, SALARY)
	WHEN HIRE_DATE >= '2000/01/01' THEN INTO EMP_NEW VALUES(EMP_ID, EMP_NAME,HIRE_DATE, SALARY)
	SELECT * FROM EMPLOYEE;

*UPDATE : 해당 테이블의 데이터를 수정 하는 명령어
--[사용형식]
--UPDATE 테이블명 SET 컬럼명 = 변경할 값
--[WHERE 컬럼명 비교 연산자 비교값]
//EX) UPDATE DEPT_COPY SET DEPT_TITLE ='전략기획부' WHERE DEPT_ID ='D9';

*UPDATE + SUBQUERY
--여러 행을 변경하거나, 여러 컬럼의 값을 변경하고자 할때 서브 쿼리를 사용하여 UPDATE를 작성할 수 있다.
--UPDATE 테이블 SET 컬럼명 = (서브쿼리);
//EX) 	UPDATE EMP_SALARY 
	SET SALARY =(SELECT SALARY FROM EMP_SALARY WHERE EMP_NAME='유재식'),
		BONUS =(SELECT BONUS FROM EMP_SALARY WHERE EMP_NAME ='유재식')	
	WHERE EMP_NAME ='방명수';

--'노옹철','전형돈','정중하','하동운'의 유재식 사원과 같은 급여, 보너스로 수정
--단, 다중열 서브쿼리로 구현
//EX)	UPDATE EMP_SALARY 
	SET(SALARY,BONUS) = (SELECT SALARY, BONUS
				FROM EMP_SALARY 
				WHERE EMP_NAME ='유재식')
	WHERE EMP_NAME IN('노옹철','정중하','전형돈','하동운');

	SELECT * FROM EMP_SALARY WHERE EMP_NAME IN('유재식','방명수','노옹철','전형돈','정중하','하동운');

--UPDATE시 변경할 값이 제약조건에 위배되지 않아야 한다.
--외래키 제약조건 위배

--UPDATE시  DEFAULT 활용--
//EX) UPDATE EMPLOYEE SET ENT_YN = DEFAULT WHERE EMP_ID =222;











