2020.8.19 [수업 104일차]


*JDBC와 Mybatis 는 별게가 아니다 둘이 비슷한 과정을 거친다.(알아서 결과값을 보내줌)

*Spring 유래 -> spring이 없었을때 어려운 부분이 존재했다. 이러한 어려움을 끝내고 개발자들한테 봄이 왔다고해서 spring이다. 

* Apache Maven
//자바용 프로젝트 관리 도구
//xml 문서를 통해 해당 프로젝트의 버전 정보 및 라이브러리 정보들을 관리하는 프레임워크이다.

*POM
//하나의 프로젝트에서 사용하는 자바버전,라이브러리, 프러그인 구성을 통합하여 관리할 수 있게 각 설정 정보를 xml로 문서화 한 것을 말한다.
//필요한 라이브러리를 다운 받는 파일이다.

*Framework
//유지보수가 쉽고 개발 시간을 줄일 수 있지만 너무 의존하게되면 개발 능력이 떨어질 수 있다.

*스프링 오픈소스 기반으로 ... 경량화된 전자정부 표준 프레임워크이다.

*****Spring Framework 의 특징
// DI(의존성 주입), Spring AOP(관점지향프로그래밍), POJO, IOC(제어반전) 

* beans : 스프링에서 관리하는 객체.
* Core Container : Spring에서 핵심 부분, beanfactory를 기반으로 bean클래스들을 제어할 수 있는 기능을 지원한다.

*SpringMVC : 
//Spring MVC 요청 처리 과정을 무조건 기억해야한다.




기존거랑 뭐가 달라진거지...?
컨트롤러에 리턴이 생겼다.
뷰정보가 담겨있는 viewResolver가 생겼다.


여러가지 설정정보들을 만들어 놓고 web.xml에 올려서 돌린다.
web.xml은 서버가 돌아갈때 읽어오는 파일이다.


IOC 랑 DI 는 땔래야 땔수 없는 사이이다.

*IOC : 제어반전(=제어역전) --> 제어권이 개발자가 아닌 프레임워크한테있다. = 주도권을 뺐긴다.
//개발하는 사람이 아닌 프로그램을 구동하는 컨테이너(=스프링)에서 직접 관리하는 것을 말한다.

스프링에서 관리하는 객체를 bean(빈) 이라고 한다.
빈들을 관리한다는 의미로 컨테이너를 beanFactory(=IOC를 담당하는 핵심컨테이너)라고한다.
beanFactory의 자식이 GenericXmlApplicaionContext이 좀더 많은 기능을 제공한다. 그래서 보통 자식을 쓴다.

xml이란 설정파일이다. GenericXmlApplicaionContext이 그걸 읽어와서 수행한다. 

IOC 컨테이너의 역할
1.객체의 생명주기와 의존성을 관리  
2.객체의 생성, 초기화, 소멸 등의 처리를 담당
3.소스 코드 구현의 시간을 단축한다.


DI(의존성 주입)? IOC 구현의 핵심 기술이다.
만들어져있는 다오객체를 스프링에서 알아서 넣어준다.
개발자가 작성해야할 코드가 단순해지고 각 객체간의 결합도가 낮아진다.

property 는 setter를 쓰는 것이다.(setter메소드를 써서 초기화하는 것이다.)
constructor


이클립스에서 spring 개발에 필요한 플러그인 하나만 설치해주면된다.
이클립스 상단 help ->marketplace -> spring(or sts) 검색 -> Spring Tools 3(Standalone Edition) 3.9.13 RELEASE


객체를 만들어놓고 주입한다.
 
(DL : Dependency Lookup) 의존성검색
//의존성을 가지고 api를 이용해서 탐색하는것.

pom.xml에서 정의한 라이브러리는 같은 버전으로 가져와야 좋다.
ex) spring-context 5.2.3 / spring-core 5.2.3




진행 : Apache Maven, Spring
----------------------------------------------------------------------------------------------------
진행 : Spring 실습


*Spring01_Hello
*Spring02_Bean
















